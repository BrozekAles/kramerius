package org.gradle

import org.gradle.api.file.*;
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.TaskAction
import org.gradle.api.artifacts.*;

import org.apache.tools.ant.taskdefs.optional.ANTLR;
import org.apache.tools.ant.types.Path;
import org.gradle.api.file.FileCollection;
import org.gradle.api.plugins.antlr.internal.GenerationPlan;
import org.gradle.api.plugins.antlr.internal.GenerationPlanBuilder;
import org.gradle.api.plugins.antlr.internal.MetadataExtracter;
import org.gradle.api.plugins.antlr.internal.XRef;
import org.gradle.api.tasks.InputFiles;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.SourceTask;
import org.gradle.api.tasks.TaskAction;
import org.gradle.util.GFileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.util.List;

import  com.sun.tools.ws.ant.*


public class WSImportTask extends SourceTask {
	
	public static final String DEFAULT_PACKAGE_NAME="com.qbizm.kramerius.imp.jaxb";

	private static final Logger LOGGER = LoggerFactory.getLogger(WSImportTask.class);
    
	private FileCollection wsClasspath;
	private File outputDirectory;
	private String packageName = DEFAULT_PACKAGE_NAME;
	private File wsdl;
	
	
	
	public String getPackageName() {
		return this.packageName;
	}
	
	public void setPackageName(String pckg) {
		this.packageName = pckg;
	}
    
	
	public void setXjcClasspath(FileCollection p) {
    	    this.wsClasspath = p;
    	}
 
	public FileCollection getXjcClasspath() {
		return this.xjcClasspath;
	}

	
	public void setWsClasspath(FileCollection p) {
		this.wsClasspath = p;
    	}
    
	@OutputDirectory
	public File getOutputDirectory() {
		return outputDirectory;
	}

	public void setOutputDirectory(File outputDirectory) {
		this.outputDirectory = outputDirectory;
	}

    	
	@InputFiles
	public FileCollection getWsClasspath() {
		return this.wsClasspath;
	}
    	
    
	private void configureExt(WSImportExtensions ext) {
		setPackageName(ext.getPackageName());
	}

	
	@TaskAction
	public void generate() {
	    WSImportExtensions ext = getProject().getExtensions().getByType(WSImportExtensions.class);
    	    if (ext != null) {
    	    	    configureExt(ext);
    	    }

    	    ant.taskdef(name: 'wsimport', classname: 'com.sun.tools.ws.ant.WsImport', classpath: getWsClasspath().asPath)
    	    //ant.wsimport(wsdl: this.wsdl.getAbsolutePath(), sourcedestdir: generatedSources, package: 'generated.wsclient', xnocompile: false)
    	    
    	    ant.wsimport(wsdl: element.getFile().getAbsolutePath(), sourcedestdir: this.outputDirectory.getAbsolutePath(), package: this.packageName, xnocompile: false, xendorsed:false, target:'2.1')

    	    
    	    // must be fork ?? why ?
		
	/*    	    
    	    FileCollection fc = this.wsClasspath;
    	    WsImport2 task = new WsImport2();
    	    task.setProject(getAnt().getAntProject());
    	    Path taskCp = new Path(null);
    	    for (File dep : fc) {
    	    	    taskCp.createPathElement().setLocation(dep);
	    }
	    
	    taskCp.setProject(getAnt().getAntProject());
    	    
    	    FileTree ft = this.getSource();	    
    	    for(File f:ft.getFiles()) {
    	    	    task.setWsdl(f.getAbsolutePath());
    	    }
    	    
    	    task.setPackage(this.packageName);
    	    task.setDestdir(this.outputDirectory);
	    task.execute();
	  */  
	    new File(this.outputDirectory,"API."+getName()+".generated").createNewFile();
    }
}
