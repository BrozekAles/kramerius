group statistics;


insertStatisticRecord() ::=<<
insert into statistics_access_log
    (record_ID, PID,DATE,REMOTE_IP_ADDRESS,"USER",REQUESTED_URL,STAT_ACTION, SESSION_ID)
    values(nextval('statistics_access_log_ID_SEQUENCE'),?,?,?,?,?,?,?);
>>


insertStatisticRecordDetail() ::=<<
insert into statistic_access_log_detail
      (detail_ID, PID,model,ISSUED_DATE,RIGHTS, LANG, TITLE, BRANCH_ID,RECORD_ID)
values(nextval('statistic_access_log_detail_id_sequence'),?,?,?,?,?,?, ?,?);
>>


insertStatisticRecordDetailAuthor() ::=<<
insert into statistic_access_log_detail_authors
      (author_id,AUTHOR_NAME,DETAIL_ID,RECORD_ID)
values(nextval('statistic_access_log_detail_authors_ID_SEQUENCE'),?,?,?);
>>

exportAllRecord() ::=<<

select 
    sa.record_id as record_id, 
    sa.pid as spid, 
    sa.date as sdate, 
    sa."USER" as suser, 
    sa.remote_ip_address as sremote_ip_address,
    sa.requested_url as srequested_url,
    sa.stat_action as sstat_action,
    sa.session_id as ssession_id,
    detail.pid as dpid,
    detail.model as dmodel,
    detail.issued_date as dissued_date,
    detail.rights as drights,
    detail.lang as dlang,
    detail.title as dtitle
    
 from statistics_access_log sa
 join statistic_access_log_detail detail on (sa.record_id=detail.record_id)

>>



/** vybrany model */
prepareModelView(action, model, paging, fromDefined, toDefined) ::=<<
 CREATE OR REPLACE VIEW _$model$_model_view AS 
   SELECT 
    last(l.record_id) AS record_id,
    last(date) as date,
    last(detail_id) as detail_id,
    l.session_id,
    model,
    d.pid,
    stat_action,
    last(d.title) as title
   FROM statistics_access_log l
     JOIN statistic_access_log_detail d USING (record_id)
  WHERE d.model::text = '$model$'::text
  GROUP BY l.session_id,model,d.pid,stat_action;
>>

selectModelReport(action, model, paging, fromDefined, toDefined) ::=<<
    $if(action)$ 
    
    select count(*) as count,
         pid,
         max(date) as date,
         last(model) as model,
         last(title) as title
         from _$model$_model_view 
         where stat_action='$action$' $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$ 
         group by pid
     order by count DESC   
    $if(paging)$ $paging()$ $endif$

    $else$   

    select count(*) as count,
         pid,
         max(date) as date,
         last(model) as model,
         last(title) as title
         from _$model$_model_view 
         where 1=1 $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$ 
         group by pid
     order by count DESC   
    $if(paging)$ $paging()$ $endif$
    
    $endif$   
>>

selectModels() ::=<<
    select distinct model from statistic_access_log_detail
>>

/** date filter **/
dateFilter(fromDefined, toDefined) ::=<<
$if(fromDefined)$
   $if(toDefined)$
and "date" > ? and "date" < ? 
   $else$
and "date">? 
   $endif$
$elseif(toDefined)$
and "date" < ? 
$endif$
>>

/** datum - datum */
selectDateDurationReport(action,from, to, paging) ::=<<
    $if(action)$

    select count(*) as count, sa.pid,max(sa.record_id) as record_id, title, model, rights,lang from statistics_access_log sa
        join  flat_statistic_access_log_detail fa using(record_id)
        where "date">? and "date" < ? and stat_action='$action$'
        group by sa.pid,title,model,rights,lang order by count DESC $if(paging)$ $paging()$ $endif$

    $else$

    select count(*) as count, sa.pid,max(sa.record_id) as record_id, title, model, rights,lang from statistics_access_log sa
        join  flat_statistic_access_log_detail fa using(record_id)
        where "date">? and "date" < ? 
        group by sa.pid,title,model,rights,lang order by count DESC $if(paging)$ $paging()$ $endif$

    $endif$
>>




/** author */ 
selectAuthorReport(action, paging,fromDefined, toDefined) ::=<<
    $if(action)$ 

select count(*) as count, auth.author_name from statistic_access_log_detail_authors auth
join statistics_access_log sta using(record_id)
where sta.stat_action='$action$'  $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$
and record_id in (
            select max(record_id) as record_id from statistics_access_log group by session_id,pid
        )
group by author_name order by count DESC $if(paging)$ $paging()$ $endif$
    $else$   
select count(*) as count, author_name from statistic_access_log_detail_authors
join statistics_access_log sta using(record_id)
where 1=1  $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$
and record_id in (
            select max(record_id) as record_id from statistics_access_log group by session_id,pid
        )
group by author_name order by count DESC $if(paging)$ $paging()$ $endif$
        
    $endif$   
>>

/** paging */
paging() ::=<<offset ? limit ?>>


/** language */
selectLangReport(action,fromDefined, toDefined) ::=<<
    $if(action)$ 
    
    select count(*) as count, lang from statistic_access_log_detail detail
        join statistics_access_log salog using(record_id)
    where detail.lang is not null and  salog.stat_action='$action$'  $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$
and record_id in (
            select max(record_id) as record_id from statistics_access_log group by session_id,pid
        )
        group by lang order by count DESC

    $else$   


    select count(*) as count, lang from statistic_access_log_detail 
    join statistics_access_log sta using(record_id)
where lang is not null  $dateFilter(fromDefined=fromDefined,toDefined=toDefined)$
and record_id in (
            select max(record_id) as record_id from statistics_access_log group by session_id,pid
        )
    group by lang order by count DESC
    
    $endif$   
    
>>



/** pids */
pids(pids) ::=<< $pids:{pid|'$pid$'};separator=","$ >>
